// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model Ticket {
  UUID               String       @id @default(dbgenerated("uuid_generate_v1mc()"))
  ownerName          String       @unique
  ownerContacts      String[]
  ownerAffiliation   Organisation @relation(fields: [ownerAffiliationId], references: [UUID], onUpdate: Cascade, onDelete: Cascade)
  ownerAffiliationId String
  quotas             Quota[]
  createdTime        DateTime     @default(now())
  lastUpdated        DateTime     @updatedAt
  invitation         Invitation   @relation(fields: [invitationId], references: [UUID], onUpdate: Cascade, onDelete: Cascade)
  invitationId       String
}

model Quota {
  UUID        String    @id @default(dbgenerated("uuid_generate_v1mc()"))
  quotaType   QuotaType @relation(fields: [quotaTypeId], references: [UUID], onUpdate: Cascade, onDelete: Cascade)
  quotaTypeId String
  usageLeft   Int       @default(1)
  ticket      Ticket    @relation(fields: [ticketId], references: [UUID], onUpdate: Cascade, onDelete: Cascade)
  ticketId    String
}

model QuotaType {
  UUID           String          @id @default(dbgenerated("uuid_generate_v1mc()"))
  name           String          @unique
  description    String          @default("")
  quotas         Quota[]
  defaultTickets DefaultTicket[]
}

model Organisation {
  UUID                 String       @id @default(dbgenerated("uuid_generate_v1mc()"))
  name                 String       @unique
  managers             User[]
  publishedInvitations Invitation[]
  createdTickets       Ticket[]
}

model Invitation {
  UUID           String          @id @default(dbgenerated("uuid_generate_v1mc()"))
  name           String
  publisher      Organisation    @relation(fields: [organisationId], references: [UUID], onUpdate: Cascade, onDelete: Cascade)
  organisationId String
  usageQuota     Int             @default(1)
  usageLeft      Int             @default(1)
  createdTickets Ticket[]
  createdTime    DateTime        @default(now())
  defaults       DefaultTicket[]
}

model DefaultTicket {
  UUID         String     @id @default(dbgenerated("uuid_generate_v1mc()"))
  invitation   Invitation @relation(references: [UUID], fields: [invitationId], onUpdate: Cascade, onDelete: Cascade)
  invitationId String
  quotaType    QuotaType  @relation(fields: [quotaTypeId], references: [UUID])
  quotaTypeId  String
  value        Int        @default(1)
}

model User {
  UUID                String       @id @default(dbgenerated("uuid_generate_v1mc()"))
  username            String       @unique
  role                Int
  passwordHash        String // impose max real password length=50 to be safe.
  organisationManaged Organisation @relation(fields: [organisationId], references: [UUID], onUpdate: Cascade, onDelete: SetDefault)
  organisationId      String       @default("default")
  tokens              Tokens?
}

model Tokens {
  user    User   @relation(references: [UUID], fields: [userId])
  userId  String @id
  refresh String @unique
  access  String @unique
}

model Statistics {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  value       BigInt   @default(0)
  lastUpdated DateTime @updatedAt
}

model Log {
  id          Int        @id @default(autoincrement())
  summary     String
  description String
  logAction   LogAction? @relation(fields: [logActionId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  logActionId Int?
  at DateTime   @default(now())
}

model LogAction {
  id   Int    @id @default(autoincrement())
  name String @unique
  logs Log[]
}
